from pymodbus.payload import BinaryPayloadDecoder
from pymodbus.constants import Endian
from data_api import calculate_crc

import struct

import crcmod

# Create a CRC16 function
crc16_func = crcmod.predefined.mkPredefinedCrcFun("crc-16")


def calculate_crc(data):
    crc = 0xFFFF
    for byte in data:
        crc ^= byte
        for _ in range(8):
            if crc & 0x0001:
                crc >>= 1
                crc ^= 0xA001
            else:
                crc >>= 1
    return crc.to_bytes(2, byteorder="big")


# Data to calculate CRC16 for
data = b"Hello, world!"

# Calculate CRC16
crc16_result = crc16_func(data)

hex_string = "AB 01 04 03 20 00 00 00 00 00 00 3F 80 00 00 40 00 00 00 40 40 00 00 40 80 00 00 40 A0 00 00 40 C0 00 00 40 E0 00 00 41 00 00 00 41 10 00 00 41 20 00 00 41 30 00 00 41 40 00 00 41 50 00 00 41 60 00 00 41 70 00 00 41 80 00 00 41 88 00 00 41 90 00 00 41 98 00 00 41 A0 00 00 41 A8 00 00 41 B0 00 00 41 B8 00 00 41 C0 00 00 41 C8 00 00 41 D0 00 00 41 D8 00 00 41 E0 00 00 41 E8 00 00 41 F0 00 00 41 F8 00 00 42 00 00 00 42 04 00 00 42 08 00 00 42 0C 00 00 42 10 00 00 42 14 00 00 42 18 00 00 42 1C 00 00 42 20 00 00 42 24 00 00 42 28 00 00 42 2C 00 00 42 30 00 00 42 34 00 00 42 38 00 00 42 3C 00 00 42 40 00 00 42 44 00 00 42 48 00 00 42 4C 00 00 42 50 00 00 42 54 00 00 42 58 00 00 42 5C 00 00 42 60 00 00 42 64 00 00 42 68 00 00 42 6C 00 00 42 70 00 00 42 74 00 00 42 78 00 00 42 7C 00 00 42 80 00 00 42 82 00 00 42 84 00 00 42 86 00 00 42 88 00 00 42 8A 00 00 42 8C 00 00 42 8E 00 00 42 90 00 00 42 92 00 00 42 94 00 00 42 96 00 00 42 98 00 00 42 9A 00 00 42 9C 00 00 42 9E 00 00 42 A0 00 00 42 A2 00 00 42 A4 00 00 42 A6 00 00 42 A8 00 00 42 AA 00 00 42 AC 00 00 42 AE 00 00 42 B0 00 00 42 B2 00 00 42 B4 00 00 42 B6 00 00 42 B8 00 00 42 BA 00 00 42 BC 00 00 42 BE 00 00 42 C0 00 00 42 C2 00 00 42 C4 00 00 42 C6 00 00 42 C8 00 00 42 CA 00 00 42 CC 00 00 42 CE 00 00 42 D0 00 00 42 D2 00 00 42 D4 00 00 42 D6 00 00 42 D8 00 00 42 DA 00 00 42 DC 00 00 42 DE 00 00 42 E0 00 00 42 E2 00 00 42 E4 00 00 42 E6 00 00 42 E8 00 00 42 EA 00 00 42 EC 00 00 42 EE 00 00 42 F0 00 00 42 F2 00 00 42 F4 00 00 42 F6 00 00 42 F8 00 00 42 FA 00 00 42 FC 00 00 42 FE 00 00 43 00 00 00 43 01 00 00 43 02 00 00 43 03 00 00 43 04 00 00 43 05 00 00 43 06 00 00 43 07 00 00 43 08 00 00 43 09 00 00 43 0A 00 00 43 0B 00 00 43 0C 00 00 43 0D 00 00 43 0E 00 00 43 0F 00 00 43 10 00 00 43 11 00 00 43 12 00 00 43 13 00 00 43 14 00 00 43 15 00 00 43 16 00 00 43 17 00 00 43 18 00 00 43 19 00 00 43 1A 00 00 43 1B 00 00 43 1C 00 00 43 1D 00 00 43 1E 00 00 43 1F 00 00 43 20 00 00 43 21 00 00 43 22 00 00 43 23 00 00 43 24 00 00 43 25 00 00 43 26 00 00 43 27 00 00 43 28 00 00 43 29 00 00 43 2A 00 00 43 2B 00 00 43 2C 00 00 43 2D 00 00 43 2E 00 00 43 2F 00 00 43 30 00 00 43 31 00 00 43 32 00 00 43 33 00 00 43 34 00 00 43 35 00 00 43 36 00 00 43 37 00 00 43 38 00 00 43 39 00 00 43 3A 00 00 43 3B 00 00 43 3C 00 00 43 3D 00 00 43 3E 00 00 43 3F 00 00 43 40 00 00 43 41 00 00 43 42 00 00 43 43 00 00 43 44 00 00 43 45 00 00 43 46 00 00 43 47 00 00 07 6B"

hex_string = "AB 01 04 03 20 00 00 00 00 00 01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00 05 00 00 00 06 00 00 00 07 00 00 00 08 00 00 00 09 00 00 00 0A 00 00 00 0B 00 00 00 0C 00 00 00 0D 00 00 00 0E 00 00 00 0F 00 00 00 10 00 00 00 11 00 00 00 12 00 00 00 13 00 00 00 14 00 00 00 15 00 00 00 16 00 00 00 17 00 00 00 18 00 00 00 19 00 00 00 1A 00 00 00 1B 00 00 00 1C 00 00 00 1D 00 00 00 1E 00 00 00 1F 00 00 00 20 00 00 00 21 00 00 00 22 00 00 00 23 00 00 00 24 00 00 00 25 00 00 00 26 00 00 00 27 00 00 00 28 00 00 00 29 00 00 00 2A 00 00 00 2B 00 00 00 2C 00 00 00 2D 00 00 00 2E 00 00 00 2F 00 00 00 30 00 00 00 31 00 00 00 32 00 00 00 33 00 00 00 34 00 00 00 35 00 00 00 36 00 00 00 37 00 00 00 38 00 00 00 39 00 00 00 3A 00 00 00 3B 00 00 00 3C 00 00 00 3D 00 00 00 3E 00 00 00 3F 00 00 00 40 00 00 00 41 00 00 00 42 00 00 00 43 00 00 00 44 00 00 00 45 00 00 00 46 00 00 00 47 00 00 00 48 00 00 00 49 00 00 00 4A 00 00 00 4B 00 00 00 4C 00 00 00 4D 00 00 00 4E 00 00 00 4F 00 00 00 50 00 00 00 51 00 00 00 52 00 00 00 53 00 00 00 54 00 00 00 55 00 00 00 56 00 00 00 57 00 00 00 58 00 00 00 59 00 00 00 5A 00 00 00 5B 00 00 00 5C 00 00 00 5D 00 00 00 5E 00 00 00 5F 00 00 00 60 00 00 00 61 00 00 00 62 00 00 00 63 00 00 00 64 00 00 00 65 00 00 00 66 00 00 00 67 00 00 00 68 00 00 00 69 00 00 00 6A 00 00 00 6B 00 00 00 6C 00 00 00 6D 00 00 00 6E 00 00 00 6F 00 00 00 70 00 00 00 71 00 00 00 72 00 00 00 73 00 00 00 74 00 00 00 75 00 00 00 76 00 00 00 77 00 00 00 78 00 00 00 79 00 00 00 7A 00 00 00 7B 00 00 00 7C 00 00 00 7D 00 00 00 7E 00 00 00 7F 00 00 00 80 00 00 00 81 00 00 00 82 00 00 00 83 00 00 00 84 00 00 00 85 00 00 00 86 00 00 00 87 00 00 00 88 00 00 00 89 00 00 00 8A 00 00 00 8B 00 00 00 8C 00 00 00 8D 00 00 00 8E 00 00 00 8F 00 00 00 90 00 00 00 91 00 00 00 92 00 00 00 93 00 00 00 94 00 00 00 95 00 00 00 96 00 00 00 97 00 00 00 98 00 00 00 99 00 00 00 9A 00 00 00 9B 00 00 00 9C 00 00 00 9D 00 00 00 9E 00 00 00 9F 00 00 00 A0 00 00 00 A1 00 00 00 A2 00 00 00 A3 00 00 00 A4 00 00 00 A5 00 00 00 A6 00 00 00 A7 00 00 00 A8 00 00 00 A9 00 00 00 AA 00 00 00 AB 00 00 00 AC 00 00 00 AD 00 00 00 AE 00 00 00 AF 00 00 00 B0 00 00 00 B1 00 00 00 B2 00 00 00 B3 00 00 00 B4 00 00 00 B5 00 00 00 B6 00 00 00 B7 00 00 00 B8 00 00 00 B9 00 00 00 BA 00 00 00 BB 00 00 00 BC 00 00 00 BD 00 00 00 BE 00 00 00 BF 00 00 00 C0 00 00 00 C1 00 00 00 C2 00 00 00 C3 00 00 00 C4 00 00 00 C5 00 00 00 C6 00 00 00 C7 00 00 00 00 A9 63"

byte_array = bytes.fromhex(hex_string.replace(" ", ""))

provided_crc = byte_array[809 - 2] << 8 | byte_array[809 - 1]

print(f"provided crc: {provided_crc}")
print(f"calculated crc: {calculate_crc(byte_array[: (809 - 2)])}")

print("".join(format(byte, "02x") for byte in byte_array))
data_byte = byte_array[5 : (5 + 800)]
num_list = []
for i in range(0, len(data_byte), 2):
    num = (data_byte[i] << 8) | data_byte[i + 1]
    num_list.append(num)

decoder = BinaryPayloadDecoder.fromRegisters(
    num_list,
    byteorder=Endian.Big,
    wordorder=Endian.Little,
)
result = []
for i in range(0, 800, 4):
    result.append(decoder.decode_32bit_uint())

print(result)
